-- MAYBE: add support for nested modules??
-- module Test where
--   gam = 200
--   add5 = add 5

-- TODO: implement records (labelled product types)
-- type User = User { id : Int, name : String }

data Maybe a = Just a | Nothing

data Either a e =
  | Left a
  | Right e

type WithName a = (String, a)

type MyInt = Int

id : a -> a
id x = x

lte? : Int -> Int -> Bool
add : Int -> Int -> Int
sub : Int -> Int -> Int

null? : [a] -> Bool
head : [a] -> Maybe a
tail : [a] -> [a]
prepend : a -> [a] -> [a]

fuckMaybe : Maybe a -> a

mapList : (a -> b) -> [a] -> [b]
mapList fn ls =
  let
    x = fuckMaybe (head ls)
    xs = tail ls
  in
    if null? ls then
      []
    else
      prepend (fn x) xs

myList : [Int]
myList = [1,2,3,4,5,6]

addLabels : [Int] -> [WithName Int]
addLabels = mapList (\x -> ("name", x))

fibo : MyInt -> MyInt
fibo n =
  if (lte? n 1) then
    1
  else
    add
      (fibo (sub n 1))
      (fibo (sub n 2))

n = 5

-- myMaybeVal = Just 20
-- getItOut = fuckMaybe myMaybeVal

main =
  let
    result = fibo n
    newList = mapList (add 5) (mapList id myList)
  in (
      result,
      addLabels newList,
      prepend 5 []
    )

--
