-- TODO: add support for nested modules
-- module Test where
--   gam = 200
--   add5 = add 5

id : a -> a
id x = x

lte : Int -> Int -> Bool
add : Int -> Int -> Int
sub : Int -> Int -> Int

pair : a -> b -> b -- TODO: Add pair literal

null? : [a] -> Bool
head : [a] -> a
tail : [a] -> [a]
prepend : a -> [a] -> [a]

mapList : (a -> b) -> [a] -> [b]
mapList fn ls =
  if null? ls then
    []
  else
    prepend (fn (head ls)) (mapList fn (tail ls))

myList : [Int]
myList = [1,2,3,4,5,6]

fibo : Int -> Int
fibo n =
  if (lte n 1) then
    1
  else
    add
      (fibo (sub n 1))
      (fibo (sub n 2))

main =
  let
    n = 5
    result = fibo n
    newList = mapList (add 5) (mapList id myList)
  in pair result newList

--
